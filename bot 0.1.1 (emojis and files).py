import os
import random
import discord
from dotenv import load_dotenv
from discord.ext import commands
from _repeat_class import *
from _language_edits import *
from _users_admission import *

'''—ç–º–æ–¥–∑–∏ –≤ –Ω–∏–∫–∞—Ö –∏ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ª–æ–º–∞—é—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É (–ø–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ –≤ –±–ª–æ–∫–Ω–æ—Ç–µ)
.encode('utf-8') –¥–∞–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª, –Ω–æ –ª–æ–º–∞–µ—Ç—Å—è –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ (—Ç–∞–∫? –Ω—É–∂–Ω—ã –µ—â–µ —Ç–µ—Å—Ç—ã)
—Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ –ø–∏—à—É—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ê –≤ DMs - –ö–ò–†–ò–õ–õ–ò–¶–ê –ù–ï –í–ò–î–ù–ê –ö–ê–ö –ù–ê–î–û 
'''
#bad argument error
#—Å–¥–µ–ª–∞—Ç—å –∑–∞—â–∏—Ç—É –¥–ª—è –¥—É—Ä–∞–∫–∞ (–∏–ª–∏ —Ö–æ—Ç—è –±—ã –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è –Ω–µ–≥–æ) –Ω–∞–ø—Ä–∏–º–µ—Ä –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ #MissingArgument
#–ø—Ä–æ–¥—É–º–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –±—ç–∫–∞–ø–æ–≤ –ª–æ–≥–æ–≤_—Å–æ–æ–±—â–µ–Ω–∏–π, —Å–ª–æ–≤–∞—Ä–µ–π –∏ langs (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å + —Ä—É—á–Ω–æ–π —É—Ä–æ–≤–µ–Ω—å)
#–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É (—á–∏–∞—Ç–π FAQ –ø–æ—á–∞—â–µ)

#–ø—Ä–æ—Å–ª–µ–¥–∏—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç R –ø–æ—Å–ª–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ @commands
#–Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –µ—Å–ª–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥–∞—Ö –æ–¥–∏–Ω–∞–∫–æ–≤–æ –Ω–∞–∑—ã–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ F –∏ file? 
#–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–º–∞–Ω–¥
#–î–û–ß–ò–¢–ê–¢–¨ –°–û–í–ï–¢–´ –†–ï–ù–ï–ì–ê–¢–¢–û
#poglyadet Grigoriyya Petrova
# example of that sign: `

load_dotenv()
TOKEN = os.getenv('VOCABOT_TOKEN') #unique bot token (must be secured)
GUILD = '–ü–µ—Ä–≤—ã–π –∫–Ω–∏–∂–Ω—ã–π' #server name

bot_prefix = '!v ' #–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å
bot = commands.Bot(command_prefix = bot_prefix)

@bot.event
async def on_ready(): #executes when connection made and data prepaired
    #print(f'{bot.user} has been connected to discord') #'user' = 'name' + 'id'
    for guild in bot.guilds:
        if guild.name == GUILD:
            break
    print(f'{bot.user} is connected to  {guild.name} (id: {guild.id})')
    members_string = ''
    for member in guild.members:
        members_string += (member.name + "---")
    #print(members_string)
    for member in guild.members: #finding my "member"
        if member.name == "Machine ü™ê":
            my_member = member
    #print(my_member.name)
    if is_user_allowed(my_member.name): #am I even allowed lol (just in case)
        print('that user is allowed')
        await my_member.create_dm()
        await my_member.dm_channel.send("```–£ –º–µ–Ω—è –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ```")
        print('start_dm_sent')
    else:
        print('that user is not allowed. Start dm was not send')

@bot.event  #—Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º–∞
async def on_message(message): #saving of all dialogues
    log_message(message) 
    await bot.process_commands(message) #—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –¥—Ä—É–≥–∏—Ö –∫–æ–º–º–∞–Ω–¥ (—Å–º–æ—Ç—Ä–∏ FAQ –ø–æ—á–∞—â–µ)

@bot.check #global permission check
def user_permission_check(ctx): #applying permitted users list
    name = ctx.author.name #–ø–æ—Ç–æ–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ [user snowflake id] –∏ –Ω–µ –ø–∞—Ä–∏—Ç—Å—è
    #–∏ –ø–æ–ª—É—á–∞—Ç—å –µ–≥–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è/–ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    #print(f'author.name equals {name}') #–ø–æ—á–µ–º—É —ç—Ç–æ—Ç –ø—Ä–∏–Ω—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–≥–æ —Ä–∞–∑ –ø–æ—Å–ª–µ !vhelp?
    return is_user_allowed(name) #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

@bot.event 
async def on_command_error(ctx, error):
    if isinstance(error, commands.errors.CheckFailure): #–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        await ctx.send('`You do not have permission to use bot.`')
    if isinstance(error, commands.errors.CommandNotFound):  #–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
        cool_responses = ["Try something different","I've got you.. _Or not really_",
                    "**English, mother#$^%*1!! Can you speak it?**","I'm speechless","Wrong command",
                    "This command haven't been added yet, unfortunately"]
        #await ctx.send(random.choice(cool_responses))
        await ctx.send(f'`{random.choice(cool_responses)}`')

@bot.event 
async def on_reaction_add(reaction, user): #leads to card flip on 'translation' side 
    if user == bot.user:
        return
    if not is_active_card(reaction.message.id):
        return
    user_langs = get_langs_from_txt()
    R = create_R_with_langs(user.name, user_langs)
    R.dm_self_input(reaction.message.content)
    await reaction.message.edit(content = R.dm_card('translation'))

@bot.event 
async def on_reaction_remove(reaction, user): #flips card_message on 'word' side again
    if user == bot.user:
        return
    if not is_active_card(reaction.message.id):
        return
    user_langs = get_langs_from_txt()
    R = create_R_with_langs(user.name, user_langs)
    R.dm_self_input(reaction.message.content)
    await reaction.message.edit(content = R.dm_card('word'))

'''@bot.event
async def on_voice_call_or_smth(): #–æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–æ–π—Å—ã (–∫—Ç–æ —Å–∫–æ–ª—å–∫–æ –∏ —Å –∫–µ–º —Å–∏–¥–µ–ª)
'''

#-----------------------------------BEGINNING OF COMMANDS-------------------------------

@bot.command(name = 'n', help = '[word].[translation].[key] adds new word in your dictionary')
async def create_word_pair(ctx):
    name = ctx.author.name
    user_langs = get_langs_from_txt() # –∑–¥–µ—Å—å –∏ –≤ 2—Ö –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö –≤—Å–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä—è–º–æ –≤ –∞—Ä–≥—É–µ–Ω—Ç - –Ω–µ–ª—å–∑—è
    R = create_R_with_langs(name, user_langs)
    R.dm_input(ctx.message.content.split(bot_prefix + 'n ',1)[1])
    s = R.info()
    print(s)  
    file = R'_Dictionaries/of ' + name + '.txt'
    with open(file, 'a') as F:
        R.append_to_txt(F)
    await ctx.send('`New word pair has been created`')

@bot.command(name = 'language', 
            help = "[ID] Sets up language for words")
async def set_language(ctx, language):
    user_langs = get_langs_from_txt()
    update_langs('language', ctx.author.name, language, user_langs)
    await ctx.send("```Foreign language has been changed.```") 

@bot.command(name = 'native', 
            help = "[ID] Sets up language for translations")
async def set_native(ctx, native):
    user_langs = get_langs_from_txt()
    update_langs('native', ctx.author.name, native, user_langs)
    await ctx.send("```Native language has been changed.```") 

@bot.command(name = 'cards', 
            help = '[n] [first/last] to get first/last n words from your dictionary') 
async def get_partial_dictionary(ctx, n, what_end):
    number = int(n)
    if what_end == 'last': #–Ω—É–∂–µ–Ω –ª–∏ —Ç–∞–∫–æ–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—É—Ç—å?
        number *= -1
    with open('_Dictionaries/of ' + ctx.author.name + '.txt','r') as F_dm: #–ø—Ä–∏—á–µ—Å–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã –≤ string.input()
        repeat_list = read_from_txt(F_dm, number)
    for R in repeat_list:
        await ctx.author.create_dm() #–Ω—É–∂–Ω–æ –ª–∏ —ç—Ç–æ?
        card_message = await ctx.author.dm_channel.send(R.dm_card('word'))
        #await ctx.author.dm_channel.send(R.dm_card('word'))
        await card_message.add_reaction('üîÅ') #add reaction on card-message
        with open('active_cards.txt', 'a') as F:
            F.write(str(card_message.id) + '\n')
    response = f'{what_end} {n} words from your dictionary have been sent into your DMs'
    if len(repeat_list) == 0: #NEED TESTING
        response = 'Your file is empty. _Trust me_'
    await ctx.send(response)      

#–°–î–ï–õ–ê–¢–¨ –ì–†–£–ü–ü–£ –ö–û–ú–ê–ù–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ö–ê–†–¢–û–ß–ï–ö
'''@bot.command(name = 'all_cards', help = 'sends all cards in DM')
@bot.command(name = 'today_cards', help = 'sends your today's cards in DM')
@bot.command(name = 'delete_last', help = 'deletes your last card from dictionary')
@bot.command(name = '', help = '')
@bot.command(name = '', help = '')
'''
@bot.command(name = 'clr_cards', 
            help = 'Deletes your dictionary without backups')
async def clear_dictionary(ctx):
    with open('_' + ctx.author.name + '.txt',"w") as F_clr:
        F_clr.write('')
    await ctx.send(" Your data has been deleted. " +
     "Though you'll never be able to check this")

#new line git tes

#--------------------------END OF COMMANDS. BEGINNING OF THE LIST OF FUNCTIONS--------------------


def log_message(message): #–≤—ã–Ω–µ—Å–ª–∏ —Å—é–¥–∞ —Ñ—É–Ω–∫—Ü–∏—é –≤–µ–¥–µ–Ω–∏—è —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º—ã —Ü–µ–ª–∏–∫–æ–º
    time = message.created_at 
    author = message.author
    print(f'--- message from {author} ---')
    if type(message.channel) == discord.channel.DMChannel:
        name = message.channel.recipient.name #–∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ DM-–∫–∞–Ω–∞–ª–∞
        with open(fR'_DMs_history\of {name}.txt', 'ab') as F:
            if author == bot.user:
                F.write(f'{bot.user.name} - {time}\n{message.content}\n\n'.encode('utf-8'))
            else:
                F.write(f'{author.name} - {time}\n{message.content}\n\n'.encode('utf-8'))
    if type(message.channel) == discord.channel.TextChannel:
        guild = message.guild
        dirs = os.listdir('_Server_msg_hisory')
        if (f'of {guild}' in dirs) == False:
            os.mkdir(Rf'_Server_msg_hisory\of {guild}')
        with open(fR'_Server_msg_hisory\of {guild}\{message.channel}.txt', 'ab') as F:
            if author == bot.user:
                F.write(f'{author.name} - {time}\n{message.content}\n\n'.encode('utf-8'))
            else:
                F.write(f'{author.name} - {time}\n{message.content}\n\n'.encode('utf-8'))
    #–µ—â–µ –µ—Å—Ç—å —Ç–∏–ø—ã –∫–∞–Ω–∞–ª–æ–≤ –∫—Ä–æ–º–µ DMChannel –∏ TextChannel?

def is_active_card(msg_id: int): #check whether this message is an active card or not
#–ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –∏ on reaction –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    ans = False 
    with open('active_cards.txt', 'r') as F:
        for line in F:
            line = line.replace('\r','')
            line = line.replace('\n','')
            if line == str(msg_id):
                return True
    return ans

def create_folders():
    dirs = os.listdir()
    if ('_Dictionaries' in dirs) == False:
        os.mkdir('_Dictionaries')
    if ('_DMs_history' in dirs) == False:
        os.mkdir('_DMs_history')
    if ('_Server_msg_hisory' in dirs) == False:
        os.mkdir('_Server_msg_hisory')

def clear_active_cards():
    with open('active_cards.txt', 'w') as F:
        F.write('')

create_folders()
clear_active_cards() #—á—Ç–æ–±—ã –Ω–µ –æ–±–º–∞–Ω—ã–≤–∞—Ç—å—Å—è 
#–Ω–∞ —Å—á–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∫—ç—à–∞ –∏ —Å–ø–∏—Å–∫–∞ id

bot.run(TOKEN)
