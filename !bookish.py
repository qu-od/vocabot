from typing import List, Tuple, Dict, Union, Optional
import discord
from discord.ext import commands
import psycopg2
from _database import cursor_exec_select, cursor_exec_edit
from _readalong_class import (Book, Readalong, read_book_instance_from_discord_channel, 
    load_readalong_from_embed)


def is_me():#decorator for is_me check
    def is_me_check(ctx):
        return ctx.message.author.id == 303115719644807168 #my_id
    return commands.check(is_me_check)

def is_bookish_moderator(): #–ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —é–∑–µ—Ä –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ü–ö
    # NEED TESTING
    def is_bookish_moderator_check(ctx):
        author = ctx.message.author
        admin_role     = ctx.guild.get_role(679731966228037719)
        moderator_role = ctx.guild.get_role(679732018073960475)
        # print(author.roles)
        return (admin_role in author.roles
             or moderator_role in author.roles
             or author.id == 303115719644807168
             ) #my_id
    return commands.check(is_bookish_moderator_check)

def is_bookish_server():
    def is_bookish_check(ctx):
        return ctx.message.guild.id == 673968890325237771 #First Bookish ID
    return commands.check(is_bookish_check)

def is_my_servers():
    def is_bookish_check(ctx):
        return ((ctx.message.guild.id == 673968890325237771) #First Bookish ID
            or ctx.message.guild.id == 693476909677412363)
    return commands.check(is_bookish_check)

#---------------------------------converters------------------------------------
def str_to_book(argument: str) -> Book:
    return read_book_instance_from_discord_channel(argument)


#-------------------------------COMMAND LIST------------------------------------

"""@commands.command(name = '–∫–æ–≥–¥–∞_–¥—Ä?')
@is_bookish_server()
async def when_bookish_created(ctx):
    await ctx.send(str(ctx.guild.created_at))"""

#----------------------------messaging commands---------------------------------
@commands.command(name = '_custom_msg',
    help = '–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª var_id, –µ—Å–ª–∏ channel_type == server' + 
    '–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä—É var_id –≤ –ª–∏—á–∫—É, –µ—Å–ª–∏ channel_type == direct')
#to channels or users on the sever where command is invoked
@is_me()
@is_my_servers()
async def custom_message(ctx, channel_type: str, var_id_str: str, *args): #—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–Ω—Ç –¥–ª—è –ø–∏—Ç–æ–Ω–∞?
    #–†–ê–ë–û–¢–ê–ï–¢ –ß–ï–†–ï–ó –†–ê–ó
    var_id = int(var_id_str)
    print(channel_type, var_id, args)
    message = ' '.join(args)
    if channel_type == 'server':
        await ctx.guild.get_channel(var_id).send(message)
    elif channel_type == 'direct':

        print(ctx.guild)
        print(var_id)
        member = ctx.guild.get_member(var_id)
        print(member)

        await member.create_dm()
        await member.dm_channel.send(message)
    else:
        await ctx.send('`Wrong channel_type argument`')

@commands.command(
    name = '_embed_server_msg', 
    help = 'sends embed with these title, text and picture in this text channel') 
#to channels or users on the sever where command is invoked
@is_me()
@is_my_servers()
async def embed_server_msg(
        ctx, channel_id_str: str, embed_title: str, embed_text: str, 
        embed_picture_link: str):
    embed = discord.Embed(
        type = 'rich', 
        title = embed_title, 
        description = embed_text, 
        colour = discord.Colour.green())
    embed.set_image(url = embed_picture_link)
    # embed.set_image(url = another_embed_picture_link)
    channel_id = int(channel_id_str)
    await ctx.guild.get_channel(channel_id).send(embed = embed)

@commands.command(
    name = '_all_advice_embeds', #–¥–ª—è –≤—Å–µ—Ö —ç–º–±–µ–¥–æ–≤ —Å—Ä–∞–∑—É
    help = '–¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–≤–µ—Ç–æ–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º') 
#to channels or users on the sever where command is invoked
@is_me()
@is_my_servers()
async def all_advice_embeds(
        ctx, channel_id_str: str, *advice_strings): #embed_strings: List[str]
    channel_id = int(channel_id_str)
    channel = ctx.guild.get_channel(channel_id)
    # —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–≤–µ—Ç–∞ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –ø—Ä–æ–±–µ–ª–∞–º–∏
    # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–º–±–µ–¥–∞ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ —ç–º–±–µ–¥–∞ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏ "\n"
    # –Ω–∞ —Å–æ–≤–µ—Ç –º–æ–∂–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –µ–º–±–µ–¥–æ–≤ (–µ—Å–ª–∏ –Ω–∞–¥–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏)
    for advice_string in advice_strings:
        advice_params = advice_string.split('\n')
        embed_title: str = advice_params[0]
        embed_text: str  = advice_params[1]
        embed_picture_link: str = advice_params[2]
        embed = discord.Embed(
            type = 'rich', 
            title = embed_title, 
            description = embed_text, 
            colour = discord.Colour.green())
        embed.set_image(url = embed_picture_link)
        await channel.send(embed = embed)

        #–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –±—É–¥—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –µ–º–±–µ–¥—ã –¥–ª—è –ø–∞—Ä –æ–ø–∏—Å–∞–Ω–∏–µ-–∫–∞—Ä—Ç–∏–Ω–∫–∞
        advice_params_number: int = len(advice_params)
        additional_embeds_number: int = (advice_params_number - 1) // 2
        for i in range(additional_embeds_number - 1):
            embed_text         = advice_params[3 + 2*i]
            embed_picture_link = advice_params[3 + 2*i + 1]
            embed = discord.Embed(
                type = 'rich', 
                description = embed_text, 
                colour = discord.Colour.green())
            embed.set_image(url = embed_picture_link)
            await channel.send(embed = embed)
    await channel.send(
        "```‚¨ÜÔ∏è ‚¨ÜÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ª–∏—Å—Ç–∞–π—Ç–µ –≤ –Ω–∞—á–∞–ª–æ –∫–∞–Ω–∞–ª–∞, "
        +" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ‚¨ÜÔ∏è ‚¨ÜÔ∏è```")


# ----------------------------readalong commands--------------------------------
@commands.command(name = 'ra_poll_create', 
    help = '[n: int] —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç-–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä –∫–Ω–∏–≥–∏ –Ω–∞ n-–Ω–æ–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ')
@is_my_servers()
@is_bookish_moderator()
async def create_readalong_poll(ctx, number: int):
    global readalong #CEASE GLOBAL
    readalong = Readalong(number)
    poll_message = await ctx.send(embed = readalong.form_poll_embed())
    readalong.poll_message_id = str(poll_message.id)

@commands.command(
    name = 'ra_poll_add_book', 
    help = ('[–∞–≤—Ç–æ—Ä --- –Ω–∞–∑–≤–∞–Ω–∏–µ --- –∂–∞–Ω—Ä(–º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å)' +
        '--- –∫–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü(–º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å)] –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–Ω–∏–≥—É –≤ —Å–ø–∏—Å–æ–∫' +
        '–¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Å—Ç —Å —ç—Ç–∏–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º'))
@is_my_servers()
@is_bookish_moderator()
async def add_book_to_readalong_poll(ctx, *, new_book: str_to_book):
    global readalong #CEASE GLOBAL
    readalong.add_book(new_book)
    poll_message = await ctx.fetch_message(readalong.poll_message_id)
    await poll_message.edit(embed = readalong.form_poll_embed())

@commands.command(
    name = 'ra_poll_delete_book', 
    help = '[–Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ –≤ —Å–ø–∏—Å–∫–µ (–æ—Ç 1)] —É–¥–∞–ª—è–µ—Ç –∫–Ω–∏–≥—É –∏–∑ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è')
@is_my_servers()
@is_bookish_moderator()
async def delete_book_from_readalong_poll(ctx, number: int):
    global readalong #CEASE GLOBAL
    readalong.delete_book(number) #–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å 1. –ø–µ—Ä–µ–≤–æ–¥ –≤ –∏–Ω–¥. —Å 0 –∏–¥–µ—Ç –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞
    poll_message = await ctx.fetch_message(readalong.poll_message_id)
    await poll_message.edit(embed = readalong.form_poll_embed())

@commands.command(
    name = 'ra_poll_load', 
    help = '[id —Å–æ–æ–±—â–µ–Ω–∏—è] –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ ')
@is_my_servers()
@is_bookish_moderator()
async def load_readalong_poll(ctx, poll_message_id: str):
    global readalong #CEASE GLOBAL
    poll_message = await ctx.fetch_message(poll_message_id) #FIND PROPER FUNC
    poll_embed = poll_message.embeds[0] #first (and the only embed in message) 
    readalong = load_readalong_from_embed(poll_embed)

@commands.command(
    name = 'add_reactions',
    help = '[n] [id] –¥–æ–±–∞–≤–ª—è–µ—Ç n —Ä–µ–∞–∫—Ü–∏–π-—á–∏—Å–µ–ª (–Ω–∞—á–∏–Ω–∞—è —Å –µ–¥–∏–Ω–∏—Ü—ã)' +
        ' –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º id. n <= 10')
@is_my_servers()
@is_bookish_moderator()
async def react_with_numbers(ctx, number: int, message_id: str):
    message = await ctx.fetch_message(message_id)
    all_number_emojis = ['1Ô∏è‚É£','2Ô∏è‚É£','3Ô∏è‚É£','4Ô∏è‚É£','5Ô∏è‚É£','6Ô∏è‚É£','7Ô∏è‚É£','8Ô∏è‚É£','9Ô∏è‚É£','üîü']
    number_reactions = all_number_emojis[:number]
    for reaction in number_reactions:
        await message.add_reaction(reaction)

# ----------------------------stats --commands--------------------------------
'''@commands.command(name = '_status_dump', help = 'get status')
@is_me()
async def get_status(ctx, server_id: str):
    guild = ctx.bot.get_guild(int(server_id))
    print(guild.name)
    with open('dump_status.txt', 'wb') as F:
        for member in guild.members:
            F.write(f"{member.status} --- {member.name}\n".encode('utf-8'))
    await ctx.send("```Status dump is succsesful```")'''


def setup(bot):
    # bot.add_command(when_bookish_created)
    bot.add_command(create_readalong_poll)
    bot.add_command(add_book_to_readalong_poll)
    bot.add_command(delete_book_from_readalong_poll)
    bot.add_command(load_readalong_poll)
    bot.add_command(react_with_numbers)
    bot.add_command(custom_message)
    bot.add_command(embed_server_msg)
    bot.add_command(all_advice_embeds)